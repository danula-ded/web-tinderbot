const { HtmlTelegramBot, userInfoToString } = require("./bot");
const ChatGptService = require("./gpt");
const API = require("../security")

class MyTelegramBot extends HtmlTelegramBot {
    constructor(token) {
        super(token);
        this.mode = null;
        this.list = [];
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    async start(msg) {
        this.mode = "main";
        const text = this.loadMessage("main")
        await this.sendImage("main")
        await this.sendText(text);

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é
        await this.showMainMenu({
            "start": "–ù–∞—á–∞—Ç—å",
            "profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé",
            "opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
            "message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
            "date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
            "gpt": "–û–ë—â–∞–µ–º—Å—è —Å –ò–ò",
            "html": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è html –≤ –≤–∏–¥–µ img",
        })
    }

    async html(msg) {
        await this.sendHTML('<h3 style="color:#1558b0">–ü—Ä–∏–≤–µ—Ç</h3>')
        const html = this.loadHtml("main")
        await this.sendHTML(html, { theme: "dark" })
    }

    async gpt(msg) {
        this.mode = "gpt";
        const text = this.loadMessage("gpt")
        await this.sendImage("gpt")
        await this.sendText(text)
    }

    async gptDialog(msg) {
        const myMessage = await this.sendText("–¢–∞–∫ –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ \n –∏ —Ç–∞–∫ –º–∞–ª–æ –æ—Ç–≤–µ—Ç–æ–≤....")
        const text = msg.text;
        const answer = await chatgpt.sendQuestion("–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", text)
        await this.editText(myMessage, answer)
    }

    async date(msg) {
        this.mode = "date"
        const text = this.loadMessage("date")
        await this.sendImage("date")
        await this.sendTextButtons(text, {
            "date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
            "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
            "date_zendaya": "–ó–µ–Ω–¥–µ—è",
            "date_gosling": "–†–∞–π–Ω –ì–æ—Å–ª–∏–Ω–≥",
            "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏",
        })
    }

    async dateButton(callbackQuery) {
        const query = callbackQuery.data;
        await this.sendImage(query)
        await this.sendText("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ü—Ä–∏–≥–ª–∞—Å–∏ –¥–µ–≤—É—à–∫—É / –ø–∞—Ä–Ω—è –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∑–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π:")

        const prompt = this.loadPrompt(query)
        chatgpt.setPrompt(prompt)
    }

    async dateDialog(msg) {
        const text = msg.text;
        const myMessage = await this.sendText("–ù–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç....")
        const answer = await chatgpt.addMessage(text)
        await this.editText(myMessage, answer)
    }

    async message(msg) {
        this.mode = "message";
        const text = this.loadMessage("message")
        await this.sendImage("message")
        await this.sendTextButtons(text, {
            "message_next": "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ",
        })
    }

    async messageButton(callbackQuery) {
        const myMessage = await this.sendText("–ö–∞–∫ –±—ã —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ....")
        const query = callbackQuery.data;
        const prompt = this.loadPrompt(query)
        const userChatHistory = this.list.join("\n\n")
        const answer = await chatgpt.sendQuestion(prompt, userChatHistory)
        await this.editText(myMessage, answer)
    }

    async messageDialog(msg) {
        const text = msg.text;
        this.list.push(text)
    }

    // —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    async hello(msg) {
        if (this.mode === "gpt") {
            await this.gptDialog(msg)
        }
        else if (this.mode === "date") {
            await this.dateDialog(msg)
        }
        else if (this.mode === "message") {
            await this.messageDialog(msg)
        }
        else {
            const text = msg.text;
            await this.sendText("<b>–ü—Ä–∏–≤–µ—Ç!!</b>");
            await this.sendText("<i>–ö–∞–∫ –¥–µ–ª–∞?</i>");
            await this.sendText(`–í—ã –ø–∏—Å–∞–ª–∏: ${text}`);

            await this.sendImage("avatar_main")

            await this.sendTextButtons("–ö–∞–∫–∞—è —É –≤–∞—Å —Ç–µ–º–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º??", {
                "theme_light": "–°–≤–µ—Ç–ª–∞—è",
                "theme_dark": "–¢–µ–º–Ω–∞—è",
            });
        }
    }

    // —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    async helloButton(callbackQuery) {
        const query = callbackQuery.data;
        if (query === "theme_light")
            await this.sendText("–£ –≤–∞—Å —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞!")
        else if (query === "theme_dark")
            await this.sendText("–£ –≤–∞—Å —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞!")
    }
}

const chatgpt = new ChatGptService(`${API.GPT}`)
const bot = new MyTelegramBot(`${API.TG}`);

bot.onCommand(/\/start/, bot.start) //  /start
bot.onCommand(/\/html/, bot.html) //  /html
bot.onCommand(/\/gpt/, bot.gpt) //  /gpt 
bot.onCommand(/\/date/, bot.date) //  /date 
bot.onCommand(/\/message/, bot.message) //  /message 
bot.onTextMessage(bot.hello)
bot.onButtonCallback(/^date_.*/, bot.dateButton)
bot.onButtonCallback(/^message_.*/, bot.messageButton)
bot.onButtonCallback(/^.*/, bot.helloButton)